plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'net.researchgate.release' version '2.6.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'org.sonarqube' version '2.5'
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'checkstyle'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'org.trellisldp'
description = 'Trellis Application'
mainClassName = 'org.trellisldp.app.TrellisApplication'

ext {
    moduleName = "org.trellisldp.app"
    vendor = 'Trellis LDP'
    homepage = 'http://www.trellisldp.org'
    docURL = 'http://www.trellisldp.org/apidocs'
    license = 'Apache 2'

    /* Dependencies */
    trellisVocabularyVersion = '0.1.0'
    trellisApiVersion = '0.3.0'

    trellisAgentVersion = '0.2.1'
    trellisBinaryVersion = '0.2.2'
    trellisConstraintVersion = '0.2.2'
    trellisKafkaVersion = '0.2.0'
    trellisHttpVersion = '0.3.2'
    trellisIdVersion = '0.2.0'
    trellisIoJenaVersion = '0.2.1'
    trellisAuditVersion = '0.1.0'
    trellisEventVersion = '0.1.0'
    trellisRosidFileVersion = '0.1.3'
    trellisWebacVersion = '0.2.0'

    commonsRdfVersion = '0.3.0-incubating'
    commonsCodecVersion = '1.11'
    httpClientVersion = '4.5.2'
    slf4jVersion = '1.7.25'
    dropwizardVersion = '1.2.0'
    activationApiVersion = '1.2.0'
    jwtVersion = '0.9.0'
    jaxbVersion = '2.3.0'

    /* Testing */
    apiguardianVersion = '1.0.0'
    junitVersion = '5.0.1'
    junitPlatformVersion = '1.0.1'
    curatorVersion = '4.0.0'
    mockitoVersion = '2.11.0'
}


configurations {
    buildToolsConfig
}

dependencies {
    compile group: 'commons-codec', name: 'commons-codec', version: commonsCodecVersion
    compile group: 'javax.activation', name: 'javax.activation-api', version: activationApiVersion
    compile group: 'io.dropwizard', name: 'dropwizard-auth', version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-core', version: dropwizardVersion
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: jwtVersion
    compile group: 'org.apache.commons', name: 'commons-rdf-jena', version: commonsRdfVersion
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile project(':trellis-binary')
    compile project(':trellis-constraint-rules')
    compile project(':trellis-io-jena')
    compile project(':trellis-id')
    compile project(':trellis-rosid-file')
    compile project(':trellis-kafka')
    compile project(':trellis-api')
    compile project(':trellis-http')
    compile project(':trellis-vocabulary')
    compile project(':trellis-agent')
    compile project(':trellis-audit')
    compile project(':trellis-event-serialization')
    compile project(':trellis-webac')

    runtime group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion

    testCompile group: 'org.apiguardian', name: 'apiguardian-api', version: apiguardianVersion
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: junitPlatformVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testImplementation group: 'org.apache.curator', name: 'curator-test', version: curatorVersion

    buildToolsConfig 'org.trellisldp:trellis-build-tools:0.2.0'
}

distributions {
    main {
        contents {
            from { 'src/dist' }
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

release {
    tagTemplate = '$name-$version'

    git {
        signTag = true
    }
}


task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar
    archives sourceJar
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.7.9"
}

license {
    include "**/*.java"
    header rootProject.file('build/license/HEADER.txt')
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ""
        def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ""
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project {
            packaging 'jar'
            url 'http://www.trellisldp.org'
            inceptionYear '2017'
            name 'Trellis Linked Data Server'
            description 'The trellis linked data server'

            organization {
                name project.vendor
                url project.homepage
            }

            developers {
                developer {
                    id 'acoburn'
                    name 'Aaron Coburn'
                    email 'acoburn @ (domain of organization url)'
                    organization = 'Amherst College'
                    organizationUrl 'https://www.amherst.edu'
                    roles {
                        role 'developer'
                    }
                    timezone '-5'
                }
            }

            scm {
                connection 'scm:git:git://github.com/trellis-ldp/trellis-app.git'
                developerConnection 'scm:git:git@github.com/trellis-ldp/trellis-app.git'
                url 'https://github.com/trellis-ldp/trellis-app'
                tag 'HEAD'
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                    comments 'Copyright (c) 2017 Trellis LDP'
                }
            }
        }
    }
}

task copyDistTask(type: Copy) {
    from 'LICENSE'
    into 'src/dist'
}

task processBuildTools(type: Copy) {
    from {
        configurations.buildToolsConfig.collect {
            zipTree(it).matching {
                include 'checkstyle/*.xml'
                include 'license/*.txt'
            }
        }
    }
    into 'build'
}

checkstyle {
    configFile = rootProject.file('build/checkstyle/checkstyle.xml')
    configProperties.checkstyleConfigDir = rootProject.file('build/checkstyle/')
    toolVersion = "8.1"
}

sonarqube {
    properties {
        property "sonar.projectName", "Trellis Repository Application"
        property "sonar.projectKey", "org.trellisldp:trellis-app"
        property "sonar.links.homepage", "https://github.com/trellis-ldp/trellis"
        property "sonar.links.issue", "https://github.com/trellis-ldp/trellis-app/issues"
        property "sonar.links.scm_dev", "scm:git:git@github.com:trellis-ldp/trellis-app.git"
    }
}

task docs(type: Javadoc) {
    outputs.upToDateWhen { false }
    source sourceSets.main.allJava
    classpath = files(sourceSets.main.compileClasspath)
    destinationDir = new File(projectDir, "docs/${version}")
    options {
        links "http://docs.oracle.com/javase/8/docs/api/"
        links "https://commons.apache.org/proper/commons-rdf/apidocs/"
        links "https://trellis-ldp.github.io/trellis/apidocs/"
    }
}

checkstyleMain.dependsOn processBuildTools
assembleDist.dependsOn copyDistTask
afterReleaseBuild.dependsOn uploadArchives
afterReleaseBuild.dependsOn docs

